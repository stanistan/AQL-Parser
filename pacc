#!/usr/bin/php
<?php
 abstract class PaccGenerator{public function __toString(){return$this->generate();}public function writeToFile($file){if(is_string($file)){return@file_put_contents($file,$this->generate());}else if(is_resource($file)&&get_resource_type($file)==='file'){return@fwrite($file,$this->generate());}throw new BadMethodCallException('Argument file must be a filename or opened file handle.');}abstract protected function generate();}class PaccGrammar{public$name;public$options=array();public$nonterminals;public$terminals;public$productions;public$start;public function __construct(PaccSet$nonterminals,PaccSet$terminals,PaccSet$productions,PaccNonterminal$start){if($nonterminals->getType()!=='PaccNonterminal'){throw new InvalidArgumentException('PaccSet<PaccNonterminal> expected, PaccSet<'.$nonterminals->getType().'> given.');}if($terminals->getType()!=='PaccTerminal'){throw new InvalidArgumentException('PaccSet<PaccTerminal> expected, PaccSet<'.$terminals->getType().'> given.');}if($productions->getType()!=='PaccProduction'){throw new InvalidArgumentException('PaccSet<PaccProduction> expected, PaccSet<'.$productions->getType().'> given.');}$this->nonterminals=$nonterminals;$this->terminals=$terminals;$this->productions=$productions;$this->start=$start;}}class PaccLRGenerator extends PaccGenerator{private$grammar;private$table_pitch;private$states;private$jumps;private$table=array();private$generated;private$header;private$inner;private$footer;private$indentation='    ';private$eol=PHP_EOL;private$terminals_prefix='self::';private$parse='doParse';public function __construct(PaccGrammar$grammar){$this->grammar=$grammar;file_put_contents('php://stderr','augment... ');$this->augment();file_put_contents('php://stderr','indexes... ');$this->computeIndexes();file_put_contents('php://stderr','first... ');$this->computeFirst();file_put_contents('php://stderr','follow... ');$this->computeFollow();file_put_contents('php://stderr','states... ');$this->computeStates();file_put_contents('php://stderr','table... ');$this->computeTable();file_put_contents('php://stderr',"\n");foreach(array('header','inner','footer','indentation','eol','terminals_prefix','parse')as$name){if(isset($grammar->options[$name])){$this->$name=$grammar->options[$name];}}}protected function generate(){if($this->generated===NULL){$this->doGenerate();}return$this->generated;}private function doGenerate(){$this->generated.='<?php'.$this->eol;if(strpos($this->grammar->name,'\\')===FALSE){$classname=$this->grammar->name;}else{$namespace=explode('\\',$this->grammar->name);$classname=array_pop($namespace);$this->generated.='namespace '.implode('\\',$namespace).';'.$this->eol;}$this->generated.=$this->header.$this->eol;$this->generated.='class '.$classname.$this->eol.'{'.$this->eol;$table=array();foreach($this->table as$k=>$v){if($v===NULL){continue;}$table[]=$k.'=>'.$v;}$this->generated.=$this->indentation.'private $_table = array('.implode(',',$table).');'.$this->eol;$this->generated.=$this->indentation.'private $_table_pitch = '.$this->table_pitch.';'.$this->eol;$terminals_types=array();$terminals_values=array();foreach($this->grammar->terminals as$terminal){if($terminal->type!==NULL){$terminals_types[]=$this->terminals_prefix.$terminal->type.'=>'.$terminal->index;}else if($terminal->value!==NULL){$terminals_values[]=var_export($terminal->value,TRUE).'=>'.$terminal->index;}}$this->generated.=$this->indentation.'private $_terminals_types = array('.implode(',',$terminals_types).');'.$this->eol;$this->generated.=$this->indentation.'private $_terminals_values = array('.implode(',',$terminals_values).');'.$this->eol;$productions_lengths=array();$productions_lefts=array();foreach($this->grammar->productions as$production){$productions_lengths[]=$production->index.'=>'.count($production->right);$productions_lefts[]=$production->index.'=>'.$production->left->index;$this->generated.=$this->indentation.'private function _reduce'.$production->index.'() {'.$this->eol;$this->generated.=$this->indentation.$this->indentation.'extract(func_get_arg(0), EXTR_PREFIX_INVALID, \'_\');'.$this->eol;$this->generated.=$this->indentation.$this->indentation.$this->phpizeVariables('$$ = NULL;').$this->eol;if($production->code!==NULL){$this->generated.=$this->indentation.$this->indentation.$this->phpizeVariables($production->code).$this->eol;}else{$this->generated.=$this->indentation.$this->indentation.$this->phpizeVariables('$$ = $1;').$this->eol;}$this->generated.=$this->indentation.$this->indentation.$this->phpizeVariables('return $$;').$this->eol;$this->generated.=$this->indentation.'}'.$this->eol;}$this->generated.=$this->indentation.'private $_productions_lengths = array('.implode(',',$productions_lengths).');'.$this->eol;$this->generated.=$this->indentation.'private $_productions_lefts = array('.implode(',',$productions_lefts).');'.$this->eol;$this->generated.=<<<E
    private function {$this->parse}() {
        \$stack = array(NULL, 0);
        for (;;) {
            \$state = end(\$stack);
            \$terminal = 0;
            if (isset(\$this->_terminals_types[\$this->_currentTokenType()])) {
                \$terminal = \$this->_terminals_types[\$this->_currentTokenType()];
            } else if (isset(\$this->_terminals_values[\$this->_currentTokenLexeme()])) {
                \$terminal = \$this->_terminals_values[\$this->_currentTokenLexeme()];
            }

            if (!isset(\$this->_table[\$state * \$this->_table_pitch + \$terminal])) {
                throw new Exception('Illegal action.');
            }

            \$action = \$this->_table[\$state * \$this->_table_pitch + \$terminal];

            if (\$action === 0) { // => accept
                array_pop(\$stack); // go away, state!
                return array_pop(\$stack);

            } else if (\$action > 0) { // => shift
                array_push(\$stack, \$this->_currentToken());
                array_push(\$stack, \$action);
                \$this->_nextToken();

            } else { // \$action < 0 => reduce
                \$popped = array_splice(\$stack, count(\$stack) - (\$this->_productions_lengths[-\$action] * 2));
                \$args = array();
                if (\$this->_productions_lengths[-\$action] > 0) { 
                    foreach (range(0, (\$this->_productions_lengths[-\$action] - 1) * 2, 2) as \$i) {
                        \$args[\$i / 2 + 1] = \$popped[\$i];
                    }
                }

                \$goto = \$this->_table[end(\$stack) * \$this->_table_pitch + \$this->_productions_lefts[-\$action]];

                \$reduce = '_reduce' . (-\$action);
                if (method_exists(\$this, \$reduce)) {
                    array_push(\$stack, \$this->\$reduce(\$args));
                } else {
                    array_push(\$stack, NULL);
                }

                array_push(\$stack, \$goto);
            }
        }
    }


E
;foreach(array('currentToken','currentTokenType','currentTokenLexeme','nextToken')as$method){if(isset($this->grammar->options[$method])){$this->generated.=$indentation.'private function _'.$method.'() {'.$this->eol;$this->generated.=$this->grammar->options[$method].$this->eol;$this->generated.=$indentation.'}'.$this->eol.$this->eol;}}$this->generated.=$this->inner.$this->eol;$this->generated.='}'.$this->eol;$this->generated.=$this->footer;}protected function phpizeVariables($s){return str_replace('$$','$__0',preg_replace('~\$(\d+)~','$__$1',$s));}private function augment(){$newStart=new PaccNonterminal('$start');$this->grammar->startProduction=new PaccProduction($newStart,array($this->grammar->start),NULL);$this->grammar->productions->add($this->grammar->startProduction);$this->grammar->nonterminals->add($newStart);$this->grammar->start=$newStart;$this->grammar->epsilon=new PaccTerminal('$epsilon');$this->grammar->epsilon->index=-1;$this->grammar->end=new PaccTerminal('$end');$this->grammar->end->index=0;$this->grammar->end->first=new PaccSet('integer');$this->grammar->end->first->add($this->grammar->end->index);}private function computeIndexes(){$i=1;foreach($this->grammar->terminals as$terminal){$terminal->index=$i++;$terminal->first=new PaccSet('integer');$terminal->first->add($terminal->index);}$this->grammar->terminals->add($this->grammar->end);$this->max_terminal=$i-1;foreach($this->grammar->nonterminals as$nonterminal){$nonterminal->first=new PaccSet('integer');$nonterminal->follow=new PaccSet('integer');$nonterminal->index=$i++;}$this->table_pitch=$i-1;$i=1;foreach($this->grammar->productions as$production){$production->index=$i++;}}private function computeFirst(){foreach($this->grammar->productions as$production){if(count($production->right)===0){$production->left->first->add($this->grammar->epsilon->index);}}do{$done=TRUE;foreach($this->grammar->productions as$production){foreach($production->right as$symbol){foreach($symbol->first as$index){if($index!==$this->grammar->epsilon->index&&!$production->left->first->contains($index)){$production->left->first->add($index);$done=FALSE;}}if(!$symbol->first->contains($this->grammar->epsilon->index)){break;}}}}while(!$done);}private function computeFollow(){$this->grammar->start->follow->add($this->grammar->end->index);foreach($this->grammar->productions as$production){for($i=0,$len=count($production->right)-1;$i<$len;++$i){if($production->right[$i]instanceof PaccTerminal){continue;}foreach($production->right[$i+1]->first as$index){if($index===$this->grammar->epsilon->index){continue;}$production->right[$i]->follow->add($index);}}}do{$done=TRUE;foreach($this->grammar->productions as$production){for($i=0,$len=count($production->right);$i<$len;++$i){if($production->right[$i]instanceof PaccTerminal){continue;}$empty_after=TRUE;for($j=$i+1;$j<$len;++$j){if(!$production->right[$j]->first->contains($this->grammar->epsilon->index)){$empty_after=FALSE;break;}}if($empty_after&&!$production->right[$i]->follow->contains($production->left->follow)){$production->right[$i]->follow->add($production->left->follow);$done=FALSE;}}}}while(!$done);}private function computeStates(){$items=new PaccSet('PaccLRItem');$items->add(new PaccLRItem($this->grammar->startProduction,0,$this->grammar->end->index));$this->states=array($this->closure($items));$symbols=new PaccSet('PaccSymbol');$symbols->add($this->grammar->nonterminals);$symbols->add($this->grammar->terminals);for($i=0;$i<count($this->states);++$i){foreach($symbols as$symbol){$jump=$this->jump($this->states[$i],$symbol);if($jump->isEmpty()){continue;}$already_in=FALSE;foreach($this->states as$state){if($state->__eq($jump)){$already_in=TRUE;$jump=$state;break;}}if(!$already_in){$this->states[]=$jump;}$this->jumps[]=new PaccLRJump($this->states[$i],$symbol,$jump);}}}private function computeTable(){for($state=0,$len=count($this->states);$state<$len;++$state){$items=$this->states[$state];foreach($this->grammar->terminals as$terminal){$do_shift=FALSE;foreach($items as$item){if(current($item->afterDot())!==FALSE&&current($item->afterDot())->__eq($terminal)){$do_shift=TRUE;break;}}if($do_shift){$this->table[$state*$this->table_pitch+$terminal->index]=$this->getNextState($items,$terminal);if($this->table[$state*$this->table_pitch+$terminal->index]===NULL){throw new Exception('Cannot get next state for shift.');}}}foreach($items as$item){if(count($item->afterDot())>0){continue;}$tableindex=$state*$this->table_pitch+$item->terminalindex;if($item->production->__eq($this->grammar->startProduction)){$this->table[$tableindex]=0;}else{if(isset($this->table[$tableindex])){if($this->table[$tableindex]>0){throw new Exception('Shift-reduce conflict.');}else if($this->table[$tableindex]<0){throw new Exception('Reduce-reduce conflict: '.$item);}else{throw new Exception('Accpet-reduce conflict: '.$item);}}$this->table[$tableindex]=-$item->production->index;}}foreach($this->grammar->nonterminals as$nonterminal){$this->table[$state*$this->table_pitch+$nonterminal->index]=$this->getNextState($items,$nonterminal);}}}private function getNextState(PaccSet$items,PaccSymbol$symbol){if($items->getType()!=='PaccLRItem'){throw new InvalidArgumentException('Bad type - expected PaccSet<LRItem>, given PaccSet<'.$items->getType().'>.');}foreach($this->jumps as$jump){if($jump->from->__eq($items)&&$jump->symbol->__eq($symbol)){for($i=0,$len=count($this->states);$i<$len;++$i){if($jump->to->__eq($this->states[$i])){return$i;}}}}return NULL;}private function closure(PaccSet$items){if($items->getType()!=='PaccLRItem'){throw new InvalidArgumentException('Bad type - expected PaccSet<LRItem>, given PaccSet<'.$items->getType().'>.');}do{$done=TRUE;$itemscopy=clone$items;foreach($items as$item){if(!(count($item->afterDot())>=1&&current($item->afterDot())instanceof PaccNonterminal)){continue;}$newitems=new PaccSet('PaccLRItem');$beta_first=new PaccSet('integer');if(count($item->afterDot())>1){$beta_first->add(next($item->afterDot())->first);$beta_first->delete($this->grammar->epsilon->index);}if($beta_first->isEmpty()){$beta_first->add($item->terminalindex);}$B=current($item->afterDot());foreach($this->grammar->productions as$production){if($B->__eq($production->left)){foreach($beta_first as$terminalindex){$newitems->add(new PaccLRItem($production,0,$terminalindex));}}}if(!$newitems->isEmpty()&&!$itemscopy->contains($newitems)){$itemscopy->add($newitems);$done=FALSE;}}$items=$itemscopy;}while(!$done);return$items;}private function jump(PaccSet$items,PaccSymbol$symbol){if($items->getType()!=='PaccLRItem'){throw new InvalidArgumentException('Bad type - expected PaccSet<LRItem>, given PaccSet<'.$items->getType().'>.');}$ret=new PaccSet('PaccLRItem');foreach($items as$item){if(!(current($item->afterDot())!==FALSE&&current($item->afterDot())->__eq($symbol))){continue;}$ret->add(new PaccLRItem($item->production,$item->dot+1,$item->terminalindex));}return$this->closure($ret);}}class PaccLRItem{public$production;public$dot=0;public$terminalindex;public function __construct(PaccProduction$production,$dot,$terminalindex){$this->production=$production;$this->dot=$dot;$this->terminalindex=$terminalindex;}public function beforeDot(){return array_slice($this->production->right,0,$this->dot);}public function afterDot(){return array_slice($this->production->right,$this->dot);}public function __eq($o){if($o instanceof self&&$this->production->__eq($o->production)&&$this->dot===$o->dot&&$this->terminalindex===$o->terminalindex){return TRUE;}return FALSE;}public function __toString(){$ret='['.$this->production->left->name.' -> ';$syms=array();foreach($this->beforeDot()as$symbol){$syms[]=(string)$symbol;}$ret.=implode(' ',$syms);$ret.=' . ';$syms=array();foreach($this->afterDot()as$symbol){$syms[]=(string)$symbol;}$ret.=implode(' ',$syms);$ret.=', '.$this->terminalindex.']';return$ret;}}class PaccLRJump{public$from;public$symbol;public$to;public function __construct($from,$symbol,$to){$this->from=$from;$this->symbol=$symbol;$this->to=$to;}}class PaccLexer implements PaccTokenStream{private static$map=array('/^(\s+)/Ss'=>'PaccWhitespaceToken','/^([a-zA-Z][a-zA-Z_]*)/S'=>'PaccIdToken','/^(\'(?:\\\'|[^\'])*\'|"(?:\\"|[^"])*"|`(?:\\`|[^`])*`)/SU'=>'PaccStringToken','/^(@|\\\\|\\.|=|\(|\)|:|\||\{|\}|;)/S'=>'PaccSpecialToken','/^(\/\*.*\*\/)/SUs'=>'PaccCommentToken','/^(.)/Ss'=>'PaccBadToken',);private$string='';private$current=NULL;private$line=1;private$position=1;private$buffer=array();public function __construct($string='',$start_line=1){$this->line=$start_line;$this->string=$string;}public function current(){if($this->current===NULL){$this->lex();}return$this->current;}public function next(){return$this->lex();}public function lex(){if(!empty($this->buffer)){return$this->current=array_shift($this->buffer);}if(empty($this->string)){return$this->current=new PaccEndToken(NULL,$this->line,$this->position);}foreach(self::$map as$regex=>$class){if(!preg_match($regex,$this->string,$m)){continue;}$token=new$class($m[1],$this->line,$this->position);if($token instanceof PaccSpecialToken&&$m[1]==='{'){$offset=0;do{if(($rbrace=strpos($this->string,'}',$offset))===FALSE){array_push($this->buffer,new PaccCodeToken($this->string,$this->line,$this->position+1));return$this->current=$token;}$offset=$rbrace+1;$code=substr($this->string,0,$rbrace+1);$test=preg_replace($r='#"((?<!\\\\)\\\\"|[^"])*$
                                          |"((?<!\\\\)\\\\"|[^"])*"
                                          |\'((?<!\\\\)\\\\\'|[^\'])*\'
                                          |\'((?<!\\\\)\\\\\'|[^\'])*$
                                          #x','',$code);}while(substr_count($test,'{')!==substr_count($test,'}'));$code=substr($code,1,strlen($code)-2);array_push($this->buffer,new PaccCodeToken($code,$this->line,$this->position+1));$m[1].=$code;}break;}$lines=substr_count($m[1],"\n")+substr_count($m[1],"\r\n")+substr_count($m[1],"\r");$this->line+=$lines;if($lines>0){$this->position=strlen(end(preg_split("/\r?\n|\r/",$m[1])))+1;}else{$this->position+=strlen($m[1]);}$this->string=substr($this->string,strlen($m[1]));return$this->current=$token;}public static function fromString($string,$start_line=1){return new self($string,$start_line);}public static function fromFile($filename){return self::fromString(file_get_contents($filename));}}class PaccNonterminal extends PaccSymbol{public function __toString(){return$this->name;}}class PaccParser{private$stream;private$grammar;private$grammar_name;private$grammar_options=array();private$nonterminals;private$terminals;private$productions;private$start;public function __construct(PaccTokenStream$stream){$this->stream=$stream;$this->terminals=new PaccSet('PaccTerminal');$this->nonterminals=new PaccSet('PaccNonterminal');$this->productions=new PaccSet('PaccProduction');}public function parse(){if($this->grammar===NULL){for(;;){if($this->stream->current()instanceof PaccIdToken&&$this->stream->current()->value==='grammar'){$this->stream->next();$this->grammar_name=$this->backslashSeparatedName();}else if($this->stream->current()instanceof PaccIdToken&&$this->stream->current()->value==='option'){$this->stream->next();$this->options();}else if($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value==='@'){$this->stream->next();$name=$this->periodSeparatedName();$this->grammar_options[$name]=$this->code();}else{break;}if($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value===';'){$this->stream->next();}}$this->rules();$this->grammar=new PaccGrammar($this->nonterminals,$this->terminals,$this->productions,$this->start);$this->grammar->name=$this->grammar_name;$this->grammar->options=$this->grammar_options;}return$this->grammar;}private function backslashSeparatedName(){return$this->separatedName('\\');}private function periodSeparatedName(){return$this->separatedName('.');}private function separatedName($separator){$name='';$prev=NULL;while((($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value===$separator)||$this->stream->current()instanceof PaccIdToken)&&!($prev===NULL&&$this->stream->current()->value===$separator)&&($prev===NULL||get_class($this->stream->current())!==get_class($prev))){$name.=$this->stream->current()->value;$prev=$this->stream->current();$this->stream->next();}if(!($prev instanceof PaccIdToken)){throw new PaccUnexpectedToken($this->stream->current());}return$name;}private function code(){if(!($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value==='{')){throw new PaccUnexpectedToken($this->stream->current());}$this->stream->next();if(!($this->stream->current()instanceof PaccCodeToken)){throw new PaccUnexpectedToken($this->stream->current());}$code=$this->stream->current()->value;$this->stream->next();if(!($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value==='}')){throw new PaccUnexpectedToken($this->stream->current());}$this->stream->next();return$code;}private function options(){if(!($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value==='(')){return$this->singleOption();}$this->stream->next();for(;;){$this->singleOption();if($this->stream->current()instanceof PaccSpecialToken){if($this->stream->current()->value===')'){$this->stream->next();break;}else if($this->stream->current()->value===';'){$this->stream->next();if($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value===')'){$this->stream->next();break;}}}}}private function singleOption(){$name=$this->periodSeparatedName();$value=NULL;if(!($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value==='=')){throw new PaccUnexpectedToken($this->stream->current());}$this->stream->next();if($this->stream->current()instanceof PaccStringToken){$value=$this->stream->current()->value;$this->stream->next();}else if($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value==='{'){$value=$this->code();}else{throw new PaccUnexpectedToken($this->stream->current());}$this->grammar_options[$name]=$value;}private function rules(){do{if(!($this->stream->current()instanceof PaccIdToken)){throw new PaccUnexpectedToken($this->stream->current());}$name=new PaccNonterminal($this->stream->current()->value);if(($found=$this->nonterminals->find($name))!==NULL){$name=$found;}else{$this->nonterminals->add($name);}$this->stream->next();if($this->start===NULL){$this->start=$name;}if(!($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value===':')){throw new PaccUnexpectedToken($this->stream->current());}$this->stream->next();do{list($terms,$code)=$this->expression();$production=new PaccProduction($name,$terms,$code);if(($found=$this->productions->find($production))===NULL){$this->productions->add($production);}}while($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value==='|'&&!($this->stream->next()instanceof PaccEndToken));if(!($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value===';')){throw new PaccUnexpectedToken($this->stream->current());}$this->stream->next();}while(!($this->stream->current()instanceof PaccEndToken));}private function expression(){$terms=$this->terms();$code=NULL;if($this->stream->current()instanceof PaccSpecialToken&&$this->stream->current()->value==='{'){$code=$this->code();}return array($terms,$code);}private function terms(){$terms=array();while(($this->stream->current()instanceof PaccIdToken||$this->stream->current()instanceof PaccStringToken)){$t=$this->stream->current();$this->stream->next();if($t instanceof PaccIdToken){if(ord($t->value[0])>=65&&ord($t->value[0])<=90){$term=new PaccTerminal($t->value,$t->value,NULL);if(($found=$this->terminals->find($term))!==NULL){$term=$found;}else{$this->terminals->add($term);}}else{$term=new PaccNonterminal($t->value);if(($found=$this->nonterminals->find($term))!==NULL){$term=$found;}else{$this->nonterminals->add($term);}}}else{assert($t instanceof PaccStringToken);$term=new PaccTerminal($t->value,NULL,$t->value);if(($found=$this->terminals->find($term))!==NULL){$term=$found;}else{$this->terminals->add($term);}}$terms[]=$term;}return$terms;}}class PaccProduction{public$left;public$right;public$index;public$code;public function __construct(PaccNonterminal$left,array$right,$code=NULL){$this->left=$left;foreach($right as$symbol){if(!($symbol instanceof PaccSymbol)){throw new InvalidArgumentException('Right has to be array of PaccSymbol.');}}$this->right=$right;$this->code=$code;}public function __eq($o){if($o instanceof self&&$this->left->__eq($o->left)&&count($this->right)===count($o->right)&&$this->code===$o->code){for($i=0,$len=count($this->right);$i<$len;++$i){if(!$this->right[$i]->__eq($o->right[$i])){return FALSE;}}return TRUE;}return FALSE;}}class PaccRDGenerator extends PaccGenerator{private$grammar;private$generated=NULL;private$header;private$inner;private$footer;private$indentation='    ';private$eol=PHP_EOL;private$terminals_prefix='self::';private$parse='doParse';public function __construct(PaccGrammar$grammar){$this->grammar=$grammar;foreach(array('header','inner','footer','indentation','eol','terminals_prefix','parse')as$name){if(isset($grammar->options[$name])){$this->$name=$grammar->options[$name];}}}protected function generate(){if($this->generated===NULL){$this->generated='';$this->generated.='<?php'.$this->eol;if(strpos($this->grammar->name,'\\')===FALSE){$classname=$this->grammar->name;}else{$namespace=explode('\\',$this->grammar->name);$classname=array_pop($namespace);$this->generated.='namespace '.implode('\\',$namespace).';'.$this->eol;}$this->generated.=$this->header.$this->eol;$this->generated.='class '.$classname.$this->eol.'{'.$this->eol;$this->generated.=$this->phpize($this->treeize($this->grammar->productions)).$this->eol;$this->generated.=$this->inner.$this->eol;$this->generated.='}'.$this->eol;$this->generated.=$this->footer;}return$this->generated;}protected function treeize($productions){$ret=array();foreach($productions as$production){if(!isset($ret[$production->left->name])){$ret[$production->left->name]=array();}$cur=&$ret[$production->left->name];foreach($production->right as$symbol){if($symbol instanceof PaccNonterminal){$type='N';$value=$symbol->name;}else{assert($symbol instanceof PaccTerminal);if($symbol->type!==NULL){$type='T';$value=$symbol->type;}else{assert($symbol->value!==NULL);$type='S';$value=$symbol->value;}}$k=$type.':'.$value;if(!isset($cur[$k])){$cur[$k]=array();}$cur=&$cur[$k];}if($production->code!==NULL){$cur['$']=trim($production->code);}else if(!empty($terms)){$cur['$']='$$ = $1;';}else{$cur['$']='$$ = TRUE;';}}foreach($ret as&$rule){$rule=$this->treelifting($rule);}return$ret;}protected function treelifting($tree){if(count($tree)===1&&isset($tree['$'])){$tree=$tree['$'];}else{if(isset($tree['$'])){$_=$tree['$'];unset($tree['$']);}foreach($tree as$k=>&$v){$v=$this->treelifting($v);}if(isset($_)){$tree['$']=$_;}}return$tree;}protected function phpize($treeish_rules,$indentation=NULL){if($indentation===NULL){$indentation=$this->indentation;}$ret='';foreach($treeish_rules as$name=>$rule_tree){$ret.=$indentation.'private function _'.$name.'_() {'.$this->eol;$ret.=$indentation.$this->indentation.$this->phpizeVariables('$$ = TRUE;').$this->eol;$ret.=$this->phpizeRuleTree($rule_tree,$indentation.$this->indentation);$ret.=$indentation.$this->indentation.$this->phpizeVariables('return $$;').$this->eol;$ret.=$indentation.'}'.$this->eol.$this->eol;}$ret.=$indentation.'private function '.$this->parse.'() {'.$this->eol;reset($treeish_rules);$ret.=$indentation.$this->indentation.'return $this->_'.key($treeish_rules).'_();'.$this->eol;$ret.=$indentation.'}'.$this->eol;foreach(array('currentToken','currentTokenType','currentTokenLexeme','nextToken')as$method){if(isset($this->grammar->options[$method])){$ret.=$indentation.'private function _'.$method.'() {'.$this->eol;$ret.=$this->grammar->options[$method].$this->eol;$ret.=$indentation.'}'.$this->eol.$this->eol;}}return$ret;}protected function phpizeRuleTree($tree,$indentation=NULL,$i=1){if($indentation===NULL){$indentation=$this->indentation;}if(is_string($tree)){$lines=array();foreach(explode($this->eol,$tree)as$line){$lines[]=$indentation.trim($line);}return$this->phpizeVariables(implode($this->eol,$lines));}$ret='';$first=TRUE;$else=NULL;$open=1;if(isset($tree['$'])){$else=$tree['$'];unset($tree['$']);}foreach($tree as$k=>$v){$cond='';$current_token=FALSE;switch($k[0]){case'S':$s=var_export(substr($k,2),TRUE);$cond='$this->_currentTokenLexeme() === '.$s;$current_token=TRUE;break;case'T':$t=$this->phpizeTerminal(substr($k,2));$cond='$this->_currentTokenType() === '.$t;$current_token=TRUE;break;case'N':$n='_'.substr($k,2).'_';$cond=$this->phpizeVariables('($'.$i).' = $this->'.$n.'()) !== NULL';break;}$ret.=$indentation.(!$first?'else ':'').'if ('.$cond.') {'.$this->eol;if($current_token){$ret.=$indentation.$this->indentation.$this->phpizeVariables('$'.$i.' = $this->_currentToken();').$this->eol;$ret.=$indentation.$this->indentation.'$this->_nextToken();'.$this->eol;}$ret.=$this->phpizeRuleTree($v,$indentation.$this->indentation,$i+1).$this->eol;$ret.=$indentation.'}'.$this->eol;$first=FALSE;}if(!$first){$ret.=$indentation.'else {'.$this->eol;}if($else===NULL){$ret.=$indentation.$this->indentation.$this->phpizeVariables('$$ = NULL;').$this->eol;}else{$ret.=$this->phpizeRuleTree($else,$indentation.$this->indentation).$this->eol;}if(!$first){$ret.=$indentation.'}'.$this->eol;}return$ret;}protected function phpizeVariables($s){return str_replace('$$','$__0__',preg_replace('~\$(\d+)~','$__$1__',$s));}protected function phpizeTerminal($t){return$this->terminals_prefix.$t;}}class PaccSet implements Iterator,Countable{private$set=array();private$type;public function __construct($type=NULL){if(!is_string($type)){throw new InvalidArgumentException('Type has to be a string.');}$this->type=$type;}public function __eq($o){if($o instanceof self&&count($o->set)===count($this->set)){foreach($o as$item){if(!$this->contains($item)){return FALSE;}}return TRUE;}return FALSE;}public function __toString(){$ret="{\n";foreach($this->set as$item){$ret.='    '.(string)$item."\n";}$ret.="}\n";return$ret;}public function getType(){return$this->type;}public function add($item){if($item instanceof self){foreach($item->set as$i){$this->add($i);}return;}$this->checkType($item);$hash=$this->hash($item);if(!isset($this->set[$hash])&&$this->tryEq($item)===NULL){$this->set[$hash]=$item;}}public function contains($item){if($item instanceof self){foreach($item->set as$i){if(!$this->contains($i)){return FALSE;}}return TRUE;}$this->checkType($item);$hash=$this->hash($item);return isset($this->set[$hash])||$this->tryEq($item)!==NULL;}public function delete($item){$this->checkType($item);$hash=$this->hash($item);if(isset($this->set[$hash])){unset($this->set[$hash]);}else{if(($hash=$this->tryEq($item))!==NULL){$this->set[$hash];}}}public function find($item){$this->checkType($item);$hash=$this->hash($item);if(!isset($this->set[$hash])&&($hash=$this->tryEq($item))===NULL){return NULL;}return$this->set[$hash];}public function isEmpty(){return count($this->set)===0;}public function rewind(){reset($this->set);}public function current(){return current($this->set);}public function key(){return current($this->set);}public function next(){return next($this->set);}public function valid(){return current($this->set)!==FALSE;}public function count(){return count($this->set);}private function checkType($val){if(is_resource($val)||gettype($val)==='unknown type'){throw new InvalidArgumentException('Bad type - resource unsupported or uknown type');}if($this->type!==NULL&&!(gettype($val)===$this->type||(is_object($val)&&$val instanceof$this->type))){throw new InvalidArgumentException('Bad type - expected '.$this->type.', given '.(gettype($val)).(is_object($val)?' ('.get_class($val).')':'').'.');}}private function hash($val){if(is_array($val)){$a=array();foreach($val as$k=>$v){$a[]=md5(gettype($k).':'.$k).$this->hash($v);}$ret=md5(implode(',',$a));}else if(is_object($val)){$ret=spl_object_hash($val);}else{$ret=md5(gettype($val).':'.((string)$val));}return$ret;}private function tryEq($val){$ret=NULL;if(is_object($val)&&method_exists($val,'__eq')){foreach($this->set as$hash=>$item){if($val->__eq($item)){$ret=$hash;break;}}}return$ret;}}abstract class PaccSymbol{public$index;public$name;public function __construct($name){$this->name=$name;}public function __toString(){return$this->name;}public function __eq($o){if(get_class($o)===get_class($this)&&$o->name===$this->name){return TRUE;}return FALSE;}}class PaccTerminal extends PaccSymbol{public$type;public$value;public function __construct($name,$type=NULL,$value=NULL){parent::__construct($name);$this->type=$type;$this->value=$value;}public function __eq($o){if($o instanceof self&&$o->name===$this->name&&$o->type===$this->type&&$o->value===$this->value){return TRUE;}return FALSE;}public function __toString(){return'`'.$this->name.'`';}}abstract class PaccToken{public$lexeme;public$line;public$position;public$value;public function __construct($lexeme,$line,$position){$this->lexeme=$lexeme;$this->line=$line;$this->position=$position;$this->value();}protected function value(){$this->value=$this->lexeme;}}class PaccTokenFilterOutStream implements PaccTokenStream{private$stream;private$out;public function __construct(PaccTokenStream$stream,$out=NULL){$this->stream=$stream;if(!is_array($out)){$out=func_get_args();array_shift($out);}$this->out=array_flip($out);}public function current(){return$this->stream->current();}public function next(){do{$token=$this->stream->next();}while(!($token instanceof PaccEndToken)&&isset($this->out[get_class($token)]));return$token;}}interface PaccTokenStream{function current();function next();}class PaccUnexpectedToken extends Exception{public$token;public function __construct(PaccToken$t,Exception$previous=NULL){$this->token=$t;parent::__construct('Unexcepted token `'.$t->lexeme.'` of type '.get_class($t).' on line '.$t->line.' at position '.$t->position.'.',0,$previous);}}class PaccUnexpectedEnd extends Exception{public function __construct(Exception$previous=NULL){parent::__construct('Unexcepted end.',0,$previous);}}class PaccBadIdentifier extends Exception{public$token;public function __construct(PaccToken$t,Exception$previous=NULL){$this->token=$t;parent::__construct('Bad identifier `'.$t->value.'` on line '.$t->line.' at position '.$t->position.'.',0,$previous);}}class PaccIdToken extends PaccToken{}class PaccStringToken extends PaccToken{protected function value(){if($this->lexeme[0]==='"'||$this->lexeme[0]==="'"){$this->value=eval('return '.$this->lexeme.';');}else{$this->value=substr($this->lexeme,1,strlen($this->lexeme)-2);}}}class PaccSpecialToken extends PaccToken{}class PaccCodeToken extends PaccToken{}class PaccWhitespaceToken extends PaccToken{}class PaccCommentToken extends PaccToken{}class PaccEndToken extends PaccToken{}class PaccBadToken extends PaccToken{}$algorithms=array('RD'=>'recursive descent','LR'=>'canonical LR(1)',);$opts=array_merge(array('i'=>'-','o'=>'-'),getopt('hi:o:fa:'));if(isset($opts['h'])){$h=<<<E
{$_SERVER['argv'][0]} [ -h ] [ -i <input> ] [ -f ] [ -o <output> ] [ -a <algorithm> ]
    -h              show this help
    -i <input>      input file
    -f              force output file overwrite if exists
    -o <output>     output file
    -a <algorithm>  algorithm for generated  parser (default RD)
                    (use `help` to show available algorithms)

E
;die($h);}if(isset($opts['a'])&&$opts['a']==='help'){foreach($algorithms as$algorithm=>$description){echo$algorithm.': '.$description.PHP_EOL;}die();}if($opts['i']==='-'){$opts['i']='php://stdin';}if($opts['o']==='-'){$opts['o']='php://stdout';}try{$lines=@file($opts['i']);if($lines===FALSE){throw new Exception('Cannot read input file.');}$stream=new PaccTokenFilterOutStream(PaccLexer::fromString(implode('',$lines)),array('PaccWhitespaceToken','PaccCommentToken'));$parser=new PaccParser($stream);$grammar=$parser->parse();if(empty($grammar->name)){throw new Exception('`grammar` statement omitted. Cannot generated parser.');}if(!isset($opts['a'])){if(isset($grammar->options['algorithm'])){$opts['a']=$grammar->options['algorithm'];}else{$opts['a']=current(array_keys($algorithms));}}if(!isset($algorithms[$opts['a']])){throw new Exception('Unknown algorithm `'.$opts['a'].'`.');}$generatorclass='Pacc'.$opts['a'].'Generator';$generator=new$generatorclass($grammar);if(file_exists($opts['o'])&&!isset($opts['f'])){throw new Exception('Output file already exists. Use -f to force overwrite.');}$generator->writeToFile($opts['o']);}catch(PaccUnexpectedToken$e){file_put_contents('php://stderr',$e->getMessage().PHP_EOL.((string)$e->token->line).': '.rtrim($lines[$e->token->line-1]).PHP_EOL.str_repeat(' ',strlen((string)$e->token->line)+$e->token->position+1).'^'.PHP_EOL);die(-1);}catch(PaccUnexpectedEnd$e){file_put_contents('php://stderr',$e->getMessage().PHP_EOL);die(-1);}catch(PaccBadIdentifier$e){file_put_contents('php://stderr',$e->getMessage().PHP_EOL.((string)$e->token->line).': '.rtrim($lines[$e->token->line-1]).PHP_EOL.str_repeat(' ',strlen((string)$e->token->line)+$e->token->position+1).'^'.PHP_EOL);die(-1);}catch(Exception$e){file_put_contents('php://stderr',$e->getMessage().PHP_EOL);die(-1);}